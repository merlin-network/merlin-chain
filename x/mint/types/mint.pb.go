// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merlin/mint/v1beta1/mint.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Minter represents the minting state.
type Minter struct {
	// current block provisions
	BlockProvisions github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=block_provisions,json=blockProvisions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"block_provisions"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc83a4bf6918981b, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

// required values for team rewards
type TeamVestingMonthInfo struct {
	MonthsSinceGenesis     int64 `protobuf:"varint,1,opt,name=months_since_genesis,json=monthsSinceGenesis,proto3" json:"months_since_genesis,omitempty"`
	MonthStartedBlock      int64 `protobuf:"varint,2,opt,name=month_started_block,json=monthStartedBlock,proto3" json:"month_started_block,omitempty"`
	OneMonthPeriodInBlocks int64 `protobuf:"varint,3,opt,name=one_month_period_in_blocks,json=oneMonthPeriodInBlocks,proto3" json:"one_month_period_in_blocks,omitempty"`
}

func (m *TeamVestingMonthInfo) Reset()         { *m = TeamVestingMonthInfo{} }
func (m *TeamVestingMonthInfo) String() string { return proto.CompactTextString(m) }
func (*TeamVestingMonthInfo) ProtoMessage()    {}
func (*TeamVestingMonthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc83a4bf6918981b, []int{1}
}
func (m *TeamVestingMonthInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamVestingMonthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamVestingMonthInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamVestingMonthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamVestingMonthInfo.Merge(m, src)
}
func (m *TeamVestingMonthInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamVestingMonthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamVestingMonthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamVestingMonthInfo proto.InternalMessageInfo

func (m *TeamVestingMonthInfo) GetMonthsSinceGenesis() int64 {
	if m != nil {
		return m.MonthsSinceGenesis
	}
	return 0
}

func (m *TeamVestingMonthInfo) GetMonthStartedBlock() int64 {
	if m != nil {
		return m.MonthStartedBlock
	}
	return 0
}

func (m *TeamVestingMonthInfo) GetOneMonthPeriodInBlocks() int64 {
	if m != nil {
		return m.OneMonthPeriodInBlocks
	}
	return 0
}

type MonthlyVestingAddress struct {
	Address        string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	MonthlyAmounts []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,rep,name=monthly_amounts,json=monthlyAmounts,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"monthly_amounts" yaml:"monthly_amounts"`
}

func (m *MonthlyVestingAddress) Reset()         { *m = MonthlyVestingAddress{} }
func (m *MonthlyVestingAddress) String() string { return proto.CompactTextString(m) }
func (*MonthlyVestingAddress) ProtoMessage()    {}
func (*MonthlyVestingAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc83a4bf6918981b, []int{2}
}
func (m *MonthlyVestingAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonthlyVestingAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonthlyVestingAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonthlyVestingAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonthlyVestingAddress.Merge(m, src)
}
func (m *MonthlyVestingAddress) XXX_Size() int {
	return m.Size()
}
func (m *MonthlyVestingAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MonthlyVestingAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MonthlyVestingAddress proto.InternalMessageInfo

func (m *MonthlyVestingAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DistributionProportions struct {
	// grants_program defines the proportion of the minted minted_denom that is
	// to be allocated as grants.
	GrantsProgram github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=grants_program,json=grantsProgram,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"grants_program"`
	// community_pool defines the proportion of the minted minted_denom that is
	// to be allocated to the community pool.
	CommunityPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=community_pool,json=communityPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"community_pool" yaml:"community_pool"`
	// usage_incentive defines the proportion of the minted minted_denom that is
	// to be allocated as usage incentive.
	UsageIncentive github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=usage_incentive,json=usageIncentive,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usage_incentive"`
	// staking defines the proportion of the minted minted_denom that is to be
	// allocated as staking rewards.
	Staking github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=staking,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"staking"`
	// developer_rewards defines the proportion of the minted minted_denom that is
	// to be allocated to developer rewards address.
	DeveloperRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=developer_rewards,json=developerRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"developer_rewards"`
}

func (m *DistributionProportions) Reset()         { *m = DistributionProportions{} }
func (m *DistributionProportions) String() string { return proto.CompactTextString(m) }
func (*DistributionProportions) ProtoMessage()    {}
func (*DistributionProportions) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc83a4bf6918981b, []int{3}
}
func (m *DistributionProportions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionProportions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionProportions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionProportions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionProportions.Merge(m, src)
}
func (m *DistributionProportions) XXX_Size() int {
	return m.Size()
}
func (m *DistributionProportions) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionProportions.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionProportions proto.InternalMessageInfo

// Params holds parameters for the mint module.
type Params struct {
	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// block provisions from the first block
	GenesisBlockProvisions github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=genesis_block_provisions,json=genesisBlockProvisions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"genesis_block_provisions"`
	// number of blocks take to reduce rewards
	ReductionPeriodInBlocks int64 `protobuf:"varint,3,opt,name=reduction_period_in_blocks,json=reductionPeriodInBlocks,proto3" json:"reduction_period_in_blocks,omitempty"`
	// reduction multiplier to execute on each period
	ReductionFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=reduction_factor,json=reductionFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reduction_factor"`
	// distribution_proportions defines the proportion of the minted denom
	DistributionProportions DistributionProportions `protobuf:"bytes,5,opt,name=distribution_proportions,json=distributionProportions,proto3" json:"distribution_proportions"`
	// address to receive developer rewards
	WeightedDeveloperRewardsReceivers []MonthlyVestingAddress `protobuf:"bytes,6,rep,name=weighted_developer_rewards_receivers,json=weightedDeveloperRewardsReceivers,proto3" json:"weighted_developer_rewards_receivers"`
	// usage incentive address
	UsageIncentiveAddress string `protobuf:"bytes,7,opt,name=usage_incentive_address,json=usageIncentiveAddress,proto3" json:"usage_incentive_address,omitempty"`
	// grants program address
	GrantsProgramAddress string `protobuf:"bytes,8,opt,name=grants_program_address,json=grantsProgramAddress,proto3" json:"grants_program_address,omitempty"`
	// team reserve funds address
	TeamReserveAddress string `protobuf:"bytes,9,opt,name=team_reserve_address,json=teamReserveAddress,proto3" json:"team_reserve_address,omitempty"`
	// start block to distribute minting rewards
	MintingRewardsDistributionStartBlock int64 `protobuf:"varint,10,opt,name=minting_rewards_distribution_start_block,json=mintingRewardsDistributionStartBlock,proto3" json:"minting_rewards_distribution_start_block,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc83a4bf6918981b, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetReductionPeriodInBlocks() int64 {
	if m != nil {
		return m.ReductionPeriodInBlocks
	}
	return 0
}

func (m *Params) GetDistributionProportions() DistributionProportions {
	if m != nil {
		return m.DistributionProportions
	}
	return DistributionProportions{}
}

func (m *Params) GetWeightedDeveloperRewardsReceivers() []MonthlyVestingAddress {
	if m != nil {
		return m.WeightedDeveloperRewardsReceivers
	}
	return nil
}

func (m *Params) GetUsageIncentiveAddress() string {
	if m != nil {
		return m.UsageIncentiveAddress
	}
	return ""
}

func (m *Params) GetGrantsProgramAddress() string {
	if m != nil {
		return m.GrantsProgramAddress
	}
	return ""
}

func (m *Params) GetTeamReserveAddress() string {
	if m != nil {
		return m.TeamReserveAddress
	}
	return ""
}

func (m *Params) GetMintingRewardsDistributionStartBlock() int64 {
	if m != nil {
		return m.MintingRewardsDistributionStartBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*Minter)(nil), "merlin.mint.v1beta1.Minter")
	proto.RegisterType((*TeamVestingMonthInfo)(nil), "merlin.mint.v1beta1.TeamVestingMonthInfo")
	proto.RegisterType((*MonthlyVestingAddress)(nil), "merlin.mint.v1beta1.MonthlyVestingAddress")
	proto.RegisterType((*DistributionProportions)(nil), "merlin.mint.v1beta1.DistributionProportions")
	proto.RegisterType((*Params)(nil), "merlin.mint.v1beta1.Params")
}

func init() { proto.RegisterFile("merlin/mint/v1beta1/mint.proto", fileDescriptor_cc83a4bf6918981b) }

var fileDescriptor_cc83a4bf6918981b = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xb6, 0xe3, 0xe0, 0xe0, 0xa9, 0xea, 0xb4, 0x83, 0x93, 0x2c, 0x91, 0xf0, 0x86, 0x55, 0x85,
	0x22, 0x41, 0x76, 0xdb, 0x82, 0x38, 0x84, 0x53, 0xad, 0x88, 0xd6, 0x87, 0x4a, 0xd6, 0x16, 0x8a,
	0x80, 0xc3, 0x68, 0xbc, 0x3b, 0x5e, 0x8f, 0xe2, 0x9d, 0x59, 0x66, 0x66, 0x5d, 0x7c, 0xe5, 0x17,
	0x70, 0xe4, 0xc0, 0x81, 0x1f, 0xc1, 0x81, 0x9f, 0xd0, 0x63, 0x8f, 0x88, 0x83, 0x55, 0x25, 0xff,
	0x20, 0xbf, 0x00, 0xcd, 0xc7, 0xba, 0xb6, 0x9b, 0x1c, 0xe2, 0x93, 0x77, 0xde, 0xe7, 0x7d, 0x9e,
	0xf9, 0x78, 0xde, 0xf7, 0x35, 0xf0, 0x47, 0x98, 0x8d, 0x4a, 0x31, 0x8b, 0x72, 0xca, 0x54, 0x34,
	0x7d, 0x34, 0x24, 0x0a, 0x3f, 0x32, 0x8b, 0xb0, 0x10, 0x5c, 0x71, 0xd8, 0x71, 0x09, 0xa1, 0x89,
	0xb9, 0x84, 0xc3, 0x4e, 0xc6, 0x33, 0x6e, 0x12, 0x22, 0xfd, 0x65, 0x73, 0x0f, 0xfd, 0x8c, 0xf3,
	0x6c, 0x42, 0x22, 0xb3, 0x1a, 0x96, 0xa3, 0x48, 0xd1, 0x9c, 0x48, 0x85, 0xf3, 0xc2, 0x25, 0x7c,
	0xbc, 0x9e, 0x80, 0xd9, 0xcc, 0x41, 0xdd, 0x75, 0x28, 0x2d, 0x05, 0x56, 0x94, 0x33, 0x8b, 0x07,
	0x09, 0x68, 0x3e, 0xa7, 0x4c, 0x11, 0x01, 0x7f, 0x04, 0xf7, 0x86, 0x13, 0x9e, 0x9c, 0xa3, 0x42,
	0xf0, 0x29, 0x95, 0x94, 0x33, 0xe9, 0xd5, 0x8f, 0xea, 0xc7, 0xad, 0x5e, 0xf8, 0x7a, 0xee, 0xd7,
	0xfe, 0x9b, 0xfb, 0x9f, 0x65, 0x54, 0x8d, 0xcb, 0x61, 0x98, 0xf0, 0x3c, 0x4a, 0xb8, 0xcc, 0xb9,
	0x74, 0x3f, 0x27, 0x32, 0x3d, 0x8f, 0xd4, 0xac, 0x20, 0x32, 0x3c, 0x23, 0x49, 0xbc, 0x6b, 0x74,
	0x06, 0x0b, 0x99, 0xe0, 0xef, 0x3a, 0xe8, 0x7c, 0x47, 0x70, 0xfe, 0x92, 0x48, 0x45, 0x59, 0xf6,
	0x9c, 0x33, 0x35, 0xee, 0xb3, 0x11, 0x87, 0x0f, 0x41, 0x27, 0xd7, 0x0b, 0x89, 0x24, 0x65, 0x09,
	0x41, 0x19, 0x61, 0x44, 0x52, 0xbb, 0x6f, 0x23, 0x86, 0x16, 0x7b, 0xa1, 0xa1, 0xa7, 0x16, 0x81,
	0x21, 0xf8, 0xc8, 0x44, 0x91, 0x54, 0x58, 0x28, 0x92, 0x22, 0xb3, 0x97, 0xb7, 0x65, 0x08, 0xf7,
	0x0d, 0xf4, 0xc2, 0x22, 0x3d, 0x0d, 0xc0, 0x53, 0x70, 0xc8, 0x19, 0x41, 0x96, 0x53, 0x10, 0x41,
	0x79, 0x8a, 0x28, 0xb3, 0x2c, 0xe9, 0x35, 0x0c, 0x6d, 0x9f, 0x33, 0x62, 0xce, 0x34, 0x30, 0x78,
	0x9f, 0x19, 0xaa, 0x0c, 0xfe, 0xa9, 0x83, 0x3d, 0x13, 0x9f, 0xcc, 0xdc, 0xc9, 0x9f, 0xa4, 0xa9,
	0x20, 0x52, 0xc2, 0x2f, 0xc0, 0x0e, 0xb6, 0x9f, 0xee, 0x89, 0xe0, 0xd5, 0xdc, 0x6f, 0xcf, 0x70,
	0x3e, 0x39, 0x0d, 0x1c, 0x10, 0xc4, 0x55, 0x0a, 0xfc, 0x05, 0xec, 0xe6, 0x56, 0x06, 0xe1, 0x9c,
	0x97, 0x4c, 0x49, 0x6f, 0xeb, 0xa8, 0x71, 0xdc, 0xea, 0x3d, 0xbb, 0xc5, 0xc3, 0xf6, 0x99, 0xba,
	0x9a, 0xfb, 0xfb, 0x76, 0x8f, 0x35, 0xb9, 0x20, 0x6e, 0xbb, 0xc8, 0x13, 0x17, 0x78, 0xdb, 0x00,
	0x07, 0x67, 0x54, 0x2a, 0x41, 0x87, 0xa5, 0x76, 0x7b, 0x20, 0x78, 0xc1, 0x85, 0xfe, 0x92, 0xf0,
	0x7b, 0xd0, 0xce, 0x04, 0x66, 0x4a, 0x6a, 0xa7, 0x33, 0x81, 0xf3, 0x0d, 0x6d, 0xbe, 0x6b, 0x55,
	0x06, 0x56, 0x04, 0x32, 0xd0, 0x4e, 0x78, 0x9e, 0x97, 0x8c, 0xaa, 0x19, 0x2a, 0x38, 0x9f, 0x18,
	0x53, 0x5a, 0xbd, 0xa7, 0xb7, 0x93, 0xbd, 0x9a, 0xfb, 0x7b, 0xf6, 0x92, 0xab, 0x6a, 0x41, 0x7c,
	0x77, 0x11, 0x18, 0x70, 0x3e, 0x81, 0x3f, 0x80, 0xdd, 0x52, 0xe2, 0x8c, 0x20, 0x5d, 0x1e, 0x4c,
	0xd1, 0x29, 0x31, 0x76, 0xde, 0xfe, 0x1e, 0x6d, 0x23, 0xd3, 0xaf, 0x54, 0xe0, 0x33, 0xb0, 0x23,
	0x15, 0x3e, 0xa7, 0x2c, 0xf3, 0xb6, 0x37, 0x12, 0xac, 0xe8, 0xf0, 0x67, 0x70, 0x3f, 0x25, 0x53,
	0x32, 0xe1, 0x05, 0x11, 0x48, 0x90, 0x57, 0x58, 0xa4, 0xd2, 0xfb, 0x60, 0x23, 0xcd, 0x7b, 0x0b,
	0xa1, 0xd8, 0xea, 0x04, 0x7f, 0x36, 0x41, 0x73, 0x80, 0x05, 0xce, 0x25, 0xfc, 0x04, 0x00, 0x3d,
	0x46, 0x50, 0x4a, 0x18, 0x77, 0x6e, 0xc6, 0x2d, 0x1d, 0x39, 0xd3, 0x01, 0x38, 0x06, 0x9e, 0x6b,
	0x2c, 0xf4, 0x5e, 0x87, 0x6f, 0x6d, 0x74, 0x9a, 0x7d, 0xa7, 0xd7, 0x5b, 0x6d, 0x74, 0xf8, 0x0d,
	0x38, 0x14, 0x24, 0x2d, 0x13, 0x5d, 0x68, 0x37, 0x75, 0xdb, 0xc1, 0x22, 0x63, 0xb5, 0xdd, 0xf4,
	0x00, 0x7a, 0x47, 0x1e, 0xe1, 0x44, 0x71, 0xb1, 0xa1, 0x01, 0xbb, 0x0b, 0x9d, 0x6f, 0x8d, 0x0c,
	0x64, 0xc0, 0x4b, 0x97, 0xba, 0x41, 0x3f, 0x40, 0xd5, 0x0e, 0xc6, 0x8f, 0x3b, 0x8f, 0x4f, 0xc2,
	0xeb, 0x06, 0x72, 0x78, 0x43, 0x0f, 0xf5, 0xb6, 0xf5, 0x89, 0xe2, 0x83, 0xf4, 0x86, 0x16, 0xfb,
	0xad, 0x0e, 0x1e, 0xbc, 0x22, 0x34, 0x1b, 0xeb, 0x09, 0xf5, 0x5e, 0x09, 0x20, 0x41, 0x12, 0x42,
	0xa7, 0x44, 0x48, 0xaf, 0x79, 0xd4, 0x38, 0xbe, 0xf3, 0xf8, 0xf3, 0xeb, 0x37, 0xbf, 0x76, 0xf6,
	0xb8, 0xad, 0x3f, 0xad, 0xe4, 0xcf, 0xd6, 0xea, 0x22, 0xae, 0xb4, 0xe1, 0xd7, 0xe0, 0x60, 0xad,
	0x41, 0x50, 0x35, 0xb4, 0x76, 0x4c, 0x89, 0xec, 0xad, 0x16, 0x7e, 0x35, 0xdc, 0xbe, 0x02, 0xfb,
	0xab, 0xf3, 0x61, 0x41, 0xfb, 0xd0, 0xd0, 0x3a, 0x2b, 0x7d, 0x5f, 0xb1, 0x1e, 0x82, 0x8e, 0x22,
	0x38, 0x47, 0x82, 0x48, 0x22, 0x96, 0xb6, 0x6a, 0x19, 0x0e, 0xd4, 0x58, 0x6c, 0xa1, 0x8a, 0xf1,
	0x12, 0x1c, 0xeb, 0xeb, 0x52, 0x96, 0x2d, 0x1e, 0x66, 0xc5, 0x24, 0x33, 0xe1, 0xdd, 0x7c, 0x07,
	0xa6, 0x74, 0x1e, 0xb8, 0x7c, 0x77, 0xd5, 0x65, 0x73, 0xcc, 0xd0, 0x37, 0x85, 0x74, 0xba, 0xfd,
	0xc7, 0x5f, 0x7e, 0xad, 0xd7, 0x7f, 0x7d, 0xd1, 0xad, 0xbf, 0xb9, 0xe8, 0xd6, 0xdf, 0x5e, 0x74,
	0xeb, 0xbf, 0x5f, 0x76, 0x6b, 0x6f, 0x2e, 0xbb, 0xb5, 0x7f, 0x2f, 0xbb, 0xb5, 0x9f, 0xa2, 0xa5,
	0x2a, 0xd2, 0x8f, 0x2e, 0xb5, 0x6d, 0x91, 0x73, 0xe0, 0x24, 0x19, 0x63, 0xca, 0xa2, 0x5f, 0xed,
	0x1f, 0xb7, 0x29, 0xa9, 0x61, 0xd3, 0xfc, 0x55, 0x7e, 0xf9, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1f, 0x06, 0x74, 0x76, 0xd5, 0x07, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BlockProvisions.Size()
		i -= size
		if _, err := m.BlockProvisions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TeamVestingMonthInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamVestingMonthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamVestingMonthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OneMonthPeriodInBlocks != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.OneMonthPeriodInBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.MonthStartedBlock != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.MonthStartedBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.MonthsSinceGenesis != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.MonthsSinceGenesis))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MonthlyVestingAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthlyVestingAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonthlyVestingAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MonthlyAmounts) > 0 {
		for iNdEx := len(m.MonthlyAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.MonthlyAmounts[iNdEx].Size()
				i -= size
				if _, err := m.MonthlyAmounts[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DistributionProportions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionProportions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionProportions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DeveloperRewards.Size()
		i -= size
		if _, err := m.DeveloperRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Staking.Size()
		i -= size
		if _, err := m.Staking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UsageIncentive.Size()
		i -= size
		if _, err := m.UsageIncentive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CommunityPool.Size()
		i -= size
		if _, err := m.CommunityPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.GrantsProgram.Size()
		i -= size
		if _, err := m.GrantsProgram.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintingRewardsDistributionStartBlock != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.MintingRewardsDistributionStartBlock))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TeamReserveAddress) > 0 {
		i -= len(m.TeamReserveAddress)
		copy(dAtA[i:], m.TeamReserveAddress)
		i = encodeVarintMint(dAtA, i, uint64(len(m.TeamReserveAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GrantsProgramAddress) > 0 {
		i -= len(m.GrantsProgramAddress)
		copy(dAtA[i:], m.GrantsProgramAddress)
		i = encodeVarintMint(dAtA, i, uint64(len(m.GrantsProgramAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UsageIncentiveAddress) > 0 {
		i -= len(m.UsageIncentiveAddress)
		copy(dAtA[i:], m.UsageIncentiveAddress)
		i = encodeVarintMint(dAtA, i, uint64(len(m.UsageIncentiveAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WeightedDeveloperRewardsReceivers) > 0 {
		for iNdEx := len(m.WeightedDeveloperRewardsReceivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeightedDeveloperRewardsReceivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.DistributionProportions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ReductionFactor.Size()
		i -= size
		if _, err := m.ReductionFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ReductionPeriodInBlocks != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.ReductionPeriodInBlocks))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.GenesisBlockProvisions.Size()
		i -= size
		if _, err := m.GenesisBlockProvisions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockProvisions.Size()
	n += 1 + l + sovMint(uint64(l))
	return n
}

func (m *TeamVestingMonthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonthsSinceGenesis != 0 {
		n += 1 + sovMint(uint64(m.MonthsSinceGenesis))
	}
	if m.MonthStartedBlock != 0 {
		n += 1 + sovMint(uint64(m.MonthStartedBlock))
	}
	if m.OneMonthPeriodInBlocks != 0 {
		n += 1 + sovMint(uint64(m.OneMonthPeriodInBlocks))
	}
	return n
}

func (m *MonthlyVestingAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if len(m.MonthlyAmounts) > 0 {
		for _, e := range m.MonthlyAmounts {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	return n
}

func (m *DistributionProportions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GrantsProgram.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.CommunityPool.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.UsageIncentive.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.Staking.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.DeveloperRewards.Size()
	n += 1 + l + sovMint(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = m.GenesisBlockProvisions.Size()
	n += 1 + l + sovMint(uint64(l))
	if m.ReductionPeriodInBlocks != 0 {
		n += 1 + sovMint(uint64(m.ReductionPeriodInBlocks))
	}
	l = m.ReductionFactor.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.DistributionProportions.Size()
	n += 1 + l + sovMint(uint64(l))
	if len(m.WeightedDeveloperRewardsReceivers) > 0 {
		for _, e := range m.WeightedDeveloperRewardsReceivers {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	l = len(m.UsageIncentiveAddress)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.GrantsProgramAddress)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.TeamReserveAddress)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.MintingRewardsDistributionStartBlock != 0 {
		n += 1 + sovMint(uint64(m.MintingRewardsDistributionStartBlock))
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockProvisions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockProvisions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamVestingMonthInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamVestingMonthInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamVestingMonthInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthsSinceGenesis", wireType)
			}
			m.MonthsSinceGenesis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthsSinceGenesis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthStartedBlock", wireType)
			}
			m.MonthStartedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthStartedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMonthPeriodInBlocks", wireType)
			}
			m.OneMonthPeriodInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OneMonthPeriodInBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthlyVestingAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlyVestingAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlyVestingAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthlyAmounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MonthlyAmounts = append(m.MonthlyAmounts, v)
			if err := m.MonthlyAmounts[len(m.MonthlyAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionProportions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionProportions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionProportions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantsProgram", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GrantsProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsageIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisBlockProvisions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisBlockProvisions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionPeriodInBlocks", wireType)
			}
			m.ReductionPeriodInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReductionPeriodInBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReductionFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionProportions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionProportions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightedDeveloperRewardsReceivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightedDeveloperRewardsReceivers = append(m.WeightedDeveloperRewardsReceivers, MonthlyVestingAddress{})
			if err := m.WeightedDeveloperRewardsReceivers[len(m.WeightedDeveloperRewardsReceivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageIncentiveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsageIncentiveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantsProgramAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantsProgramAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingRewardsDistributionStartBlock", wireType)
			}
			m.MintingRewardsDistributionStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingRewardsDistributionStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
